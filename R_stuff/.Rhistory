test_mse_pruned <- calculate_mse(test_data$G3, test_pred_pruned)
print(paste("Pruned Tree - Training MSE:", train_mse_pruned))
print(paste("Pruned Tree - Test MSE:", test_mse_pruned))
test_mse_pruned <- calculate_mse(test_data$G3, test_pred_pruned)
print(paste("Pruned Tree - Training MSE:", train_mse_pruned))
print(paste("Pruned Tree - Test MSE:", test_mse_pruned))
# Plot the pruned tree
rpart.plot(pruned_tree, main = "Optimal Pruned Tree")
# Create custom error vs tree size plot
cp_table <- complex_tree$cptable
num_splits <- cp_table[, "nsplit"]
# Create custom error vs tree size plot
cp_table <- complex_tree$cptable
num_splits <- cp_table[, "nsplit"]
# Calculate actual MSE for each CP value
mse_values <- sapply(cp_table[, "CP"], function(cp) {
pruned <- prune(complex_tree, cp = cp)
train_pred <- predict(pruned, train_data)
test_pred <- predict(pruned, test_data)
train_mse <- calculate_mse(train_data$G3, train_pred)
test_mse <- calculate_mse(test_data$G3, test_pred)
c(train_mse, test_mse)
})
# Making data for ggplot
mse_data <- data.frame(
num_splits = rep(num_splits, 2),
mse = c(mse_values[1,], mse_values[2,]),
type = rep(c("Training MSE", "Test MSE"), each = length(num_splits))
)
ggplot(mse_data, aes(x = num_splits, y = mse, color = type)) +
geom_line() +
geom_point() +
scale_color_manual(values = c("blue", "red")) +
labs(x = "Number of Splits", y = "Mean Squared Error",
title = "MSE vs Tree Complexity",
color = "MSE Type") +
theme_minimal() +
geom_vline(xintercept = opt_splits, linetype = "dashed", color = "green") +
annotate("text", x = opt_splits, y = max(mse_values), label = "Optimal",
vjust = -1, color = "green")
ggplot(mse_data, aes(x = num_splits, y = mse, color = type)) +
geom_line() +
geom_point() +
scale_color_manual(values = c("blue", "red")) +
labs(x = "Number of Splits", y = "Mean Squared Error",
title = "MSE vs Tree Complexity",
color = "MSE Type") +
theme_minimal()
# Split the data into training (70%) and test (30%) sets
split_index <- createDataPartition(sd$G3, p = 0.7, list = FALSE)
train_data <- sd[split_index, ]
test_data <- sd[-split_index, ]
# Function to calculate MSE
calculate_mse <- function(actual, predicted) {
mean((actual - predicted)^2)
}
# Step 1: Create a complex tree
complex_tree <- rpart(G3 ~ ., data = train_data,
control = rpart.control(cp = 0.001, minsplit = 5))
rpart.plot(complex_tree, main = "Initial Complex Regression Tree")
# Calculate MSE for complex tree
train_pred_complex <- predict(complex_tree, train_data)
test_pred_complex <- predict(complex_tree, test_data)
train_mse_complex <- calculate_mse(train_data$G3, train_pred_complex)
test_mse_complex <- calculate_mse(test_data$G3, test_pred_complex)
print(paste("Complex Tree - Training MSE:", train_mse_complex))
print(paste("Complex Tree - Test MSE:", test_mse_complex))
print(paste("Complex Tree - Test MSE:", test_mse_complex))
print(paste("Complex Tree - Test MSE:", test_mse_complex))
print(paste("Complex Tree - Test MSE:", test_mse_complex))
print(paste("Complex Tree - Test MSE:", test_mse_complex))
print(paste("Complex Tree - Test MSE:", test_mse_complex))
print(paste("Complex Tree - Test MSE:", test_mse_complex))
print(paste("Complex Tree - Test MSE:", test_mse_complex))
print(paste("Complex Tree - Test MSE:", test_mse_complex))
print(paste("Complex Tree - Test MSE:", test_mse_complex))
print(paste("Complex Tree - Test MSE:", test_mse_complex))
print(paste("Complex Tree - Test MSE:", test_mse_complex))
print(paste("Complex Tree - Test MSE:", test_mse_complex))
# Calculate MSE for complex tree
MSE_complex <- function() {
train_pred_complex <- predict(complex_tree, train_data)
test_pred_complex <- predict(complex_tree, test_data)
train_mse_complex <- calculate_mse(train_data$G3, train_pred_complex)
test_mse_complex <- calculate_mse(test_data$G3, test_pred_complex)
print(paste("Complex Tree - Training MSE:", train_mse_complex))
print(paste("Complex Tree - Test MSE:", test_mse_complex))
}
MSE_complex()
train_pred_complex <- predict(complex_tree, train_data)
test_pred_complex <- predict(complex_tree, test_data)
train_mse_complex <- calculate_mse(train_data$G3, train_pred_complex)
test_mse_complex <- calculate_mse(test_data$G3, test_pred_complex)
print(paste("Complex Tree - Training MSE:", train_mse_complex))
print(paste("Complex Tree - Test MSE:", test_mse_complex))
# Calculate MSE for complex tree
MSE_complex <- function(){
train_pred_complex <- predict(complex_tree, train_data)
test_pred_complex <- predict(complex_tree, test_data)
train_mse_complex <- calculate_mse(train_data$G3, train_pred_complex)
test_mse_complex <- calculate_mse(test_data$G3, test_pred_complex)
print(paste("Complex Tree - Training MSE:", train_mse_complex))
print(paste("Complex Tree - Test MSE:", test_mse_complex))
}
MSE_complex()
# Calculate MSE for complex tree
MSE_complex <- function(){
train_pred_complex <- predict(complex_tree, train_data)
test_pred_complex <- predict(complex_tree, test_data)
train_mse_complex <- calculate_mse(train_data$G3, train_pred_complex)
test_mse_complex <- calculate_mse(test_data$G3, test_pred_complex)
print(paste("Complex Tree - Training MSE:", train_mse_complex))
print(paste("Complex Tree -     Test MSE:", test_mse_complex))
}
MSE_complex()
# Step 2: Create pruning graph
plotcp(complex_tree)
# Step 3: Find optimal CP value
opt_cp <- complex_tree$cptable[which.min(complex_tree$cptable[,"xerror"]), "CP"]
print(opt_cp)
# Step 3: Find optimal CP value
opt_cp <- complex_tree$cptable[which.min(complex_tree$cptable[,"xerror"]), "CP"]
# Step 4: Prune the tree
pruned_tree <- prune(complex_tree, cp = opt_cp)
# Calculate MSE for pruned tree
train_pred_pruned <- predict(pruned_tree, train_data)
# Calculate MSE for pruned tree
MSE_pruned <- function(){
train_pred_pruned <- predict(pruned_tree, train_data)
test_pred_pruned <- predict(pruned_tree, test_data)
train_mse_pruned <- calculate_mse(train_data$G3, train_pred_pruned)
test_mse_pruned <- calculate_mse(test_data$G3, test_pred_pruned)
print(paste("Pruned Tree - Training MSE:", train_mse_pruned))
print(paste("Pruned Tree - Test MSE:", test_mse_pruned))
}
MSE_pruned()
MSE_complex()
# Plot the pruned tree
rpart.plot(pruned_tree, main = "Optimal Pruned Tree")
# Create custom error vs tree size plot
cp_table <- complex_tree$cptable
num_splits <- cp_table[, "nsplit"]
View(cp_table)
View(mse_values)
# Create custom error vs tree size plot
cp_table <- complex_tree$cptable
num_splits <- cp_table[, "nsplit"]
# Calculate actual MSE for each CP value
mse_values <- sapply(cp_table[, "CP"], function(cp) {
pruned <- prune(complex_tree, cp = cp)
train_pred <- predict(pruned, train_data)
test_pred <- predict(pruned, test_data)
train_mse <- calculate_mse(train_data$G3, train_pred)
test_mse <- calculate_mse(test_data$G3, test_pred)
c(train_mse, test_mse)
})
# Making data for ggplot
mse_data <- data.frame(
num_splits = rep(num_splits, 2),
mse = c(mse_values[1,], mse_values[2,]),
type = rep(c("Training MSE", "Test MSE"), each = length(num_splits))
)
ggplot(mse_data, aes(x = num_splits, y = mse, color = type)) +
geom_line() +
geom_point() +
scale_color_manual(values = c("blue", "red")) +
labs(x = "Number of Splits", y = "Mean Squared Error",
title = "MSE vs Tree Complexity",
color = "MSE Type") +
theme_minimal() +
geom_vline(xintercept = opt_splits, linetype = "dashed", color = "green") +
annotate("text", x = opt_splits, y = max(mse_values), label = "Optimal",
vjust = -1, color = "green")
ggplot(mse_data, aes(x = num_splits, y = mse, color = type)) +
geom_line() +
geom_point() +
scale_color_manual(values = c("blue", "red")) +
labs(x = "Number of Splits", y = "Mean Squared Error",
title = "MSE vs Tree Complexity",
color = "MSE Type") +
theme_minimal()
# Add a vertical line and text to indicate the optimal number of terminal nodes
abline(v = num_nodes[opt_index], col = "purple", lty = 2)
text(num_nodes[opt_index], min(cp_table[, "xerror"]),
labels = paste("Optimal Size =", num_nodes[opt_index]), pos = 4, col = "black")
ggplot(mse_data, aes(x = num_splits, y = mse, color = type)) +
geom_line() +
geom_point() +
scale_color_manual(values = c("blue", "red")) +
labs(x = "Number of Splits", y = "Mean Squared Error",
title = "MSE vs Tree Complexity",
color = "MSE Type") +
theme_minimal() +
geom_vline(xintercept = num_nodes[opt_index], linetype = "dashed", color = "green") +
annotate("text", x = num_nodes[opt_index], y = max(mse_values), label = "Optimal",
vjust = -1, color = "green")
print(opt_cp)
ggplot(mse_data, aes(x = num_splits, y = mse, color = type)) +
geom_line() +
geom_point() +
scale_color_manual(values = c("blue", "red")) +
labs(x = "Number of Splits", y = "Mean Squared Error",
title = "MSE vs Tree Complexity",
color = "MSE Type") +
theme_minimal() +
geom_vline(xintercept = num_nodes[opt_cp], linetype = "dashed", color = "green") +
annotate("text", x = num_nodes[opt_cp], y = max(mse_values), label = "Optimal",
vjust = -1, color = "green")
View(mse_data)
opt_splits <- cp_table[which(cp_table[,"CP"] == opt_cp), "nsplit"]
ggplot(mse_data, aes(x = num_splits, y = mse, color = type)) +
geom_line() +
geom_point() +
scale_color_manual(values = c("blue", "red")) +
labs(x = "Number of Splits", y = "Mean Squared Error",
title = "MSE vs Tree Complexity",
color = "MSE Type") +
theme_minimal() +
geom_vline(xintercept = opt_splits, linetype = "dashed", color = "green") +
annotate("text", x = opt_splits, y = max(mse_values), label = "Optimal",
vjust = -1, color = "green")
# Calculate actual MSE for each CP value
mse_values <- sapply(cp_table[, "CP"], function(cp) {
pruned <- prune(complex_tree, cp = cp)
train_pred <- predict(pruned, train_data)
test_pred <- predict(pruned, test_data)
train_mse <- calculate_mse(train_data$G3, train_pred)
test_mse <- calculate_mse(test_data$G3, test_pred)
c(train_mse, test_mse)
})
View(mse_values)
View(mse_values)
opt_splits <- mse_data$num_splits[which.min(mse_data$mse)]
opt_splits
opt_splits <- mse_data$num_splits[which.max(mse_data$mse)]
opt_splits
opt_splits <- mse_data$num_splits[which.min(mse_data$mse)]
opt_splits
temp_mse_data <- mse_data %>% filter(type == "Test MSE")
View(temp_mse_data)
opt_splits <- temp_mse_data$num_splits[which.min(temp_mse_data$mse)]
opt_splits
temp_mse_data <- mse_data %>% filter(type == "Test MSE")
opt_splits <- temp_mse_data$num_splits[which.min(temp_mse_data$mse)]
opt_splits
ggplot(mse_data, aes(x = num_splits, y = mse, color = type)) +
geom_line() +
geom_point() +
scale_color_manual(values = c("blue", "red")) +
labs(x = "Number of Splits", y = "Mean Squared Error",
title = "MSE vs Tree Complexity",
color = "MSE Type") +
theme_minimal() +
geom_vline(xintercept = opt_splits, linetype = "dashed", color = "green") +
annotate("text", x = opt_splits, y = max(mse_values), label = "Optimal",
vjust = -1, color = "green")
ggplot(mse_data, aes(x = num_splits, y = mse, color = type)) +
geom_line() +
geom_point() +
scale_color_manual(values = c("blue", "red")) +
labs(x = "Number of Splits", y = "Mean Squared Error",
title = "MSE vs Tree Complexity",
color = "MSE Type") +
theme_minimal() +
geom_vline(xintercept = opt_splits, linetype = "dashed", color = "green") +
annotate("text", x = opt_splits, y = max(mse_values), label = opt_splits,
vjust = -1, color = "green")
min_mse <- min(temp_mse_data$mse)
ggplot(mse_data, aes(x = num_splits, y = mse, color = type)) +
geom_line() +
geom_point() +
scale_color_manual(values = c("blue", "red")) +
labs(x = "Number of Splits", y = "Mean Squared Error",
title = "MSE vs Tree Complexity",
color = "MSE Type") +
theme_minimal() +
geom_vline(xintercept = opt_splits, linetype = "dashed", color = "green") +
annotate("text", x = opt_splits, y = min_mse, label = opt_splits,
vjust = -1, color = "green")
ggplot(mse_data, aes(x = num_splits, y = mse, color = type)) +
geom_line() +
geom_point() +
scale_color_manual(values = c("blue", "red")) +
labs(x = "Number of Splits", y = "Mean Squared Error",
title = "MSE vs Tree Complexity",
color = "MSE Type") +
theme_minimal() +
geom_vline(xintercept = opt_splits, linetype = "dashed", color = "green") +
annotate("text", x = opt_splits, y = min_mse, label = "Optimal number of splits is" opt_splits,
ggplot(mse_data, aes(x = num_splits, y = mse, color = type)) +
geom_line() +
geom_point() +
scale_color_manual(values = c("blue", "red")) +
labs(x = "Number of Splits", y = "Mean Squared Error",
title = "MSE vs Tree Complexity",
color = "MSE Type") +
theme_minimal() +
geom_vline(xintercept = opt_splits, linetype = "dashed", color = "green") +
annotate("text", x = opt_splits, y = min_mse, label = "Optimal number of splits is", opt_splits,
vjust = -1, color = "black")
ggplot(mse_data, aes(x = num_splits, y = mse, color = type)) +
geom_line() +
geom_point() +
scale_color_manual(values = c("blue", "red")) +
labs(x = "Number of Splits", y = "Mean Squared Error",
title = "MSE vs Tree Complexity",
color = "MSE Type") +
theme_minimal() +
geom_vline(xintercept = opt_splits, linetype = "dashed", color = "green") +
annotate("text", x = opt_splits, y = min_mse, label = c("Optimal number of splits is"  opt_splits),
ggplot(mse_data, aes(x = num_splits, y = mse, color = type)) +
geom_line() +
geom_point() +
scale_color_manual(values = c("blue", "red")) +
labs(x = "Number of Splits", y = "Mean Squared Error",
title = "MSE vs Tree Complexity",
color = "MSE Type") +
theme_minimal() +
geom_vline(xintercept = opt_splits, linetype = "dashed", color = "green") +
annotate("text", x = opt_splits, y = min_mse, label = c("Optimal number of splits is" , opt_splits),
vjust = -1, color = "black")
label = c("Optimal number of splits is" , opt_splits)
label
opt_splits
min_mse <- min(temp_mse_data$mse)
label = c("Optimal number of splits is" , opt_splits)
ggplot(mse_data, aes(x = num_splits, y = mse, color = type)) +
geom_line() +
geom_point() +
scale_color_manual(values = c("blue", "red")) +
labs(x = "Number of Splits", y = "Mean Squared Error",
title = "MSE vs Tree Complexity",
color = "MSE Type") +
theme_minimal() +
geom_vline(xintercept = opt_splits, linetype = "dashed", color = "green") +
annotate("text", x = opt_splits, y = min_mse, label = label,
vjust = -1, color = "black")
label = c("Optimal number of splits is" , opt_splits)
ggplot(mse_data, aes(x = num_splits, y = mse, color = type)) +
geom_line() +
geom_point() +
scale_color_manual(values = c("blue", "red")) +
labs(x = "Number of Splits", y = "Mean Squared Error",
title = "MSE vs Tree Complexity",
color = "MSE Type") +
theme_minimal() +
geom_vline(xintercept = opt_splits, linetype = "dashed", color = "green") +
annotate("text", x = opt_splits, y = min_mse, label = paste("Optimal n° of splits =", opt_splits), pos = 4, col = "black"),
ggplot(mse_data, aes(x = num_splits, y = mse, color = type)) +
geom_line() +
geom_point() +
scale_color_manual(values = c("blue", "red")) +
labs(x = "Number of Splits", y = "Mean Squared Error",
title = "MSE vs Tree Complexity",
color = "MSE Type") +
theme_minimal() +
geom_vline(xintercept = opt_splits, linetype = "dashed", color = "green") +
annotate("text", x = opt_splits, y = min_mse, label = (paste("Optimal n° of splits =", opt_splits), pos = 4, col = "black"),
ggplot(mse_data, aes(x = num_splits, y = mse, color = type)) +
geom_line() +
geom_point() +
scale_color_manual(values = c("blue", "red")) +
labs(x = "Number of Splits", y = "Mean Squared Error",
title = "MSE vs Tree Complexity",
color = "MSE Type") +
theme_minimal() +
geom_vline(xintercept = opt_splits, linetype = "dashed", color = "green") +
annotate("text", x = opt_splits, y = min_mse, label = paste("Optimal n° of splits =", opt_splits),
vjust = -1, color = "black")
ggplot(mse_data, aes(x = num_splits, y = mse, color = type)) +
geom_line() +
geom_point() +
scale_color_manual(values = c("blue", "red")) +
labs(x = "Number of Splits", y = "Mean Squared Error",
title = "MSE vs Tree Complexity",
color = "MSE Type") +
theme_minimal() +
geom_vline(xintercept = opt_splits, linetype = "dashed", color = "green") +
annotate("text", x = opt_splits, y = min_mse, label = paste("Optimal number of splits =", opt_splits),
vjust = -1, color = "black")
ggplot(mse_data, aes(x = num_splits, y = mse, color = type)) +
geom_line() +
geom_point() +
scale_color_manual(values = c("blue", "red")) +
labs(x = "Number of Splits", y = "Mean Squared Error",
title = "MSE vs Tree Complexity",
color = "MSE Type") +
theme_minimal() +
geom_vline(xintercept = opt_splits, linetype = "dashed", color = "purple") +
annotate("text", x = opt_splits, y = min_mse, label = paste("Optimal number of splits =", opt_splits),
vjust = -1, color = "purple")
ggplot(mse_data, aes(x = num_splits, y = mse, color = type)) +
geom_line() +
geom_point() +
scale_color_manual(values = c("blue", "red")) +
labs(x = "Number of Splits", y = "Mean Squared Error",
title = "MSE vs Tree Complexity",
color = "MSE Type") +
theme_minimal() +
geom_vline(xintercept = opt_splits, linetype = "dashed", color = "purple") +
annotate("text", x = opt_splits +5, y = min_mse, label = paste("Optimal number of splits =", opt_splits),
vjust = -1, color = "purple")
ggplot(mse_data, aes(x = num_splits, y = mse, color = type)) +
geom_line() +
geom_point() +
scale_color_manual(values = c("blue", "red")) +
labs(x = "Number of Splits", y = "Mean Squared Error",
title = "MSE vs Tree Complexity",
color = "MSE Type") +
theme_minimal() +
geom_vline(xintercept = opt_splits, linetype = "dashed", color = "purple") +
annotate("text", x = opt_splits +6, y = min_mse +1, label = paste("Optimal number of splits =", opt_splits),
vjust = -1, color = "purple")
# Split the data
split_index <- createDataPartition(sd$G3, p = 0.7, list = FALSE)
train_data <- sd[split_index, ]
test_data <- sd[-split_index, ]
# Function to calculate MSE
calculate_mse <- function(actual, predicted) {
mean((actual - predicted)^2)
}
# Create a complex tree
complex_tree <- rpart(G3 ~ ., data = train_data, control = rpart.control(cp = 0.001, minsplit = 5))
rpart.plot(complex_tree, main = "Initial Complex Regression Tree")
# Create pruning graph
plotcp(complex_tree)
rpart.plot(complex_tree, main = "Initial Complex Regression Tree")
plotcp(complex_tree)
# Find optimal CP value
opt_cp <- complex_tree$cptable[which.min(complex_tree$cptable[,"xerror"]), "CP"]
print(opt_cp)
# Step 4: Prune the tree
pruned_tree <- prune(complex_tree, cp = opt_cp)
# Calculate the MSEs
MSE_complex <- function(){
train_pred_complex <- predict(complex_tree, train_data)
test_pred_complex <- predict(complex_tree, test_data)
train_mse_complex <- calculate_mse(train_data$G3, train_pred_complex)
test_mse_complex <- calculate_mse(test_data$G3, test_pred_complex)
print(paste("Complex Tree - Training MSE:", train_mse_complex))
print(paste("Complex Tree -     Test MSE:", test_mse_complex))
}
MSE_pruned <- function(){
train_pred_pruned <- predict(pruned_tree, train_data)
test_pred_pruned <- predict(pruned_tree, test_data)
train_mse_pruned <- calculate_mse(train_data$G3, train_pred_pruned)
test_mse_pruned <- calculate_mse(test_data$G3, test_pred_pruned)
print(paste("Pruned Tree - Training MSE:", train_mse_pruned))
print(paste("Pruned Tree - Test MSE:", test_mse_pruned))
}
MSE_complex()
MSE_pruned()
# Plot the pruned tree
rpart.plot(pruned_tree, main = "Optimal Pruned Tree")
# Prune the tree
pruned_tree <- prune(complex_tree, cp = opt_cp)
rpart.plot(pruned_tree, main = "Optimal Pruned Tree")
# Calculate the MSEs
MSE_complex <- function(){
train_pred_complex <- predict(complex_tree, train_data)
test_pred_complex <- predict(complex_tree, test_data)
train_mse_complex <- calculate_mse(train_data$G3, train_pred_complex)
test_mse_complex <- calculate_mse(test_data$G3, test_pred_complex)
print(paste("Complex Tree - Training MSE:", train_mse_complex))
print(paste("Complex Tree -     Test MSE:", test_mse_complex))
}
MSE_pruned <- function(){
train_pred_pruned <- predict(pruned_tree, train_data)
test_pred_pruned <- predict(pruned_tree, test_data)
train_mse_pruned <- calculate_mse(train_data$G3, train_pred_pruned)
test_mse_pruned <- calculate_mse(test_data$G3, test_pred_pruned)
print(paste("Pruned Tree - Training MSE:", train_mse_pruned))
print(paste("Pruned Tree - Test MSE:", test_mse_pruned))
}
MSE_complex()
MSE_pruned()
# Create custom error vs tree size plot
cp_table <- complex_tree$cptable
## 5.3 Make nice pruning plot ----
cp_table <- complex_tree$cptable
num_splits <- cp_table[, "nsplit"]
# Calculate MSE for each CP value
mse_values <- sapply(cp_table[, "CP"], function(cp) {
pruned <- prune(complex_tree, cp = cp)
train_pred <- predict(pruned, train_data)
test_pred <- predict(pruned, test_data)
train_mse <- calculate_mse(train_data$G3, train_pred)
test_mse <- calculate_mse(test_data$G3, test_pred)
c(train_mse, test_mse)
})
# Making data for ggplot
mse_data <- data.frame(
num_splits = rep(num_splits, 2),
mse = c(mse_values[1,], mse_values[2,]),
type = rep(c("Training MSE", "Test MSE"), each = length(num_splits))
)
temp_mse_data <- mse_data %>% filter(type == "Test MSE")
opt_splits <- temp_mse_data$num_splits[which.min(temp_mse_data$mse)]
opt_splits
min_mse <- min(temp_mse_data$mse)
opt_splits
ggplot(mse_data, aes(x = num_splits, y = mse, color = type)) +
geom_line() +
geom_point() +
scale_color_manual(values = c("blue", "red")) +
labs(x = "Number of Splits", y = "Mean Squared Error",
title = "MSE vs Tree Complexity",
color = "MSE Type") +
theme_minimal() +
geom_vline(xintercept = opt_splits, linetype = "dashed", color = "purple") +
annotate("text", x = opt_splits +6, y = min_mse +1, label = paste("Optimal number of splits =", opt_splits),
vjust = -1, color = "purple")
