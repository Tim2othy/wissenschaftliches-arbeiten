load("C:/Users/timtj/GitHub/wissenschaftliches-arbeiten/R_stuff/R_datasets/StudentsPerformance.RData")
View(StudentsPerformance)
load("C:/Users/timtj/GitHub/wissenschaftliches-arbeiten/R_stuff/R_datasets/life_expectancy.RData")
View(life_expectancy)
library(readr)
melb_data <- read_csv("R_datasets/mel_housing_data/melb_data.csv")
View(melb_data)
save.image("C:/Users/timtj/GitHub/wissenschaftliches-arbeiten/R_stuff/R_datasets/mel_housing.RData")
library(readr)
mushrooms <- read_csv("R_datasets/mooshrooms/mushrooms.csv")
View(mushrooms)
save.image("C:/Users/timtj/GitHub/wissenschaftliches-arbeiten/R_stuff/R_datasets/mushrooms.RData")
library(readr)
Admission_Predict_Ver1_1 <- read_csv("R_datasets/admission-data/Admission_Predict_Ver1.1.csv")
View(Admission_Predict_Ver1_1)
View(Admission_Predict_Ver1_1)
View(StudentsPerformance)
View(Admission_Predict_Ver1_1)
library(readr)
DEvideos <- read_csv("R_datasets/Trending YouTube Video Statistics/DEvideos.csv")
View(DEvideos)
library(readr)
millenniumofdata_v3_headlines <- read_csv("R_datasets/A millennium of macroeconomic data/millenniumofdata_v3_headlines.csv")
View(millenniumofdata_v3_headlines)
load("C:/Users/timtj/GitHub/wissenschaftliches-arbeiten/R_stuff/R_datasets/StudentsPerformance.RData")
load("C:/Users/timtj/GitHub/wissenschaftliches-arbeiten/R_stuff/R_datasets/mushrooms.RData")
load("C:/Users/timtj/GitHub/wissenschaftliches-arbeiten/R_stuff/R_datasets/mel_housing.RData")
load("C:/Users/timtj/GitHub/wissenschaftliches-arbeiten/R_stuff/R_datasets/life_expectancy.RData")
View(StudentsPerformance)
View(mushrooms)
View(melb_data)
View(life_expectancy)
View(mushrooms)
View(melb_data)
View(life_expectancy)
library(readr)
student_mat <- read_csv("R_datasets/student-alcohol-data/student-mat.csv")
View(student_mat)
library(readr)
student_por <- read_csv("R_datasets/student-alcohol-data/student-por.csv")
View(student_por)
View(student_mat)
d1=read.table("student-mat.csv",sep=";",header=TRUE)
cd
d1=read.table("R_datasets/student-alcohol-data/student-mat.csv",sep=";",header=TRUE)
d2=read.table("R_datasets/student-alcohol-data/student-por.csv",sep=";",header=TRUE)
d3=merge(d1,d2,by=c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet"))
print(nrow(d3)) # 382 students
d3=merge(d1,d2,by=c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet"))
View(d2)
View(student_mat)
View(student_por)
library(readr)
student_por <- read_csv("R_datasets/student-alcohol-data/student-por.csv")
View(student_por)
save.image("C:/Users/timtj/GitHub/wissenschaftliches-arbeiten/R_stuff/student_por.RData")
load("C:/Users/timtj/GitHub/wissenschaftliches-arbeiten/R_stuff/R_datasets/StudentsPerformance.RData")
load("C:/Users/timtj/GitHub/wissenschaftliches-arbeiten/R_stuff/R_datasets/life_expectancy.RData")
load("C:/Users/timtj/GitHub/wissenschaftliches-arbeiten/R_stuff/R_datasets/student_por.RData")
load("C:/Users/timtj/GitHub/wissenschaftliches-arbeiten/R_stuff/R_datasets/mel_housing.RData")
View(StudentsPerformance)
View(student_por)
View(melb_data)
View(life_expectancy)
View(StudentsPerformance)
library(readr)
student_mat <- read_csv("student-mat.csv")
View(student_mat)
save.image("C:/Users/timtj/GitHub/wissenschaftliches-arbeiten/R_stuff/student_mat.RData")
load("C:/Users/timtj/GitHub/wissenschaftliches-arbeiten/R_stuff/student_por.RData")
load("C:/Users/timtj/GitHub/wissenschaftliches-arbeiten/R_stuff/student_mat.RData")
View(student_por)
View(student_mat)
data.source=merge(student_mat,student_por,by=c("school","sex","age","address","famsize","Pstatus",
"Medu","Fedu","Mjob","Fjob","reason","nursery","internet",
"guardian","guardian","traveltime","studytime","failures",
"schoolsup","famsup","activities","higher","romantic",
"famrel","freetime","goout","Dalc","Walc","health","absences"))
View(data.source)
View(student_por)
View(student_mat)
load("C:/Users/timtj/GitHub/wissenschaftliches-arbeiten/R_stuff/student_por.RData")
View(student_por)
student_por
student_por
load("C:/Users/timtj/GitHub/wissenschaftliches-arbeiten/R_stuff/sd.RData")
View(student_por)
load("C:/Users/timtj/GitHub/wissenschaftliches-arbeiten/R_stuff/sd.RData")
View(student_por)
sd = student_por
View(sd)
View(student_por)
View(student_por)
View(student_por)
View(student_por)
View(student_por)
View(student_por)
sd = student_por
load("C:/Users/timtj/GitHub/wissenschaftliches-arbeiten/R_stuff/sd.RData")
View(student_por)
load("C:/Users/timtj/GitHub/wissenschaftliches-arbeiten/R_stuff/student_por.RData")
sd = student_por
save.image("C:/Users/timtj/GitHub/wissenschaftliches-arbeiten/R_stuff/sd.RData")
load("C:/Users/timtj/GitHub/wissenschaftliches-arbeiten/R_stuff/sd.RData")
View(student_por)
View(student_por)
View(student_por)
load("C:/Users/timtj/GitHub/wissenschaftliches-arbeiten/R_stuff/student_por.RData")
sd = student_por
plot(
sd$sex , sd$G3,
col = as.character(nonlinear_data$group),
pch = 19,                     # Solid circle
cex = 1,                    # 1.3 times default size
xlab = "X-axis",                # X-axis label
ylab = "Y-axis",                # Y-axis label
)
plot(
sd$sex , sd$G3,
)
plot(
sd$sex , sd$G3,
)
grid()
plot(
sd$sex , sd$G3,
)
sd <- student_por
View(sd)
plot(sd$G1, sd$G3, col = "blue", pch = 19)
grid()
# Install and load required packages
if (!requireNamespace("rpart", quietly = TRUE)) install.packages("rpart")
# Install and load required packages
if (!requireNamespace("rpart", quietly = TRUE)) install.packages("rpart")
if (!requireNamespace("rpart.plot", quietly = TRUE)) install.packages("rpart.plot")
# Install and load required packages
install.packages("rpart")
install.packages("rpart")
library(rpart.plot)
library(rpart)
library(rpart.plot)
# Assuming 'grade_score' is the target variable
# Adjust the formula to include all your predictor variables
tree_model <- rpart(G3 ~ ., data = sd)
# Print the summary of the tree
print(tree_model)
# Visualize the tree
rpart.plot(tree_model, box.palette = "RdYlBu", shadow.col = "gray", nn = TRUE)
# Visualize the tree
rpart.plot(tree_model, box.palette = "blue", shadow.col = "gray", nn = TRUE)
sd <- student_por
sd$G2 <- NULL
tree_model <- rpart(G3 ~ ., data = sd)
tree_model <- rpart(G3 ~ , data = sd)
tree_model <- rpart(G3 ~ ., data = sd)
# Print the summary of the tree
print(tree_model)
# Visualize the tree
rpart.plot(tree_model, box.palette = "blue", shadow.col = "gray", nn = TRUE)
sd$G1 <- NULL
tree_model <- rpart(G3 ~ ., data = sd)
# Print the summary of the tree
print(tree_model)
# Visualize the tree
rpart.plot(tree_model, box.palette = "blue", shadow.col = "gray", nn = TRUE)
# Get variable importance
var_importance <- tree_model$variable.importance
library(rpart)
library(rpart.plot)
sd <- student_por
sd$G2 <- NULL
sd$G1 <- NULL
View(sd)
plot(sd$G1, sd$G3, col = "blue", pch = 19)
plot(sd$age, sd$G3, col = "blue", pch = 19)
grid()
tree_model <- rpart(G3 ~ ., data = sd)
# Print the summary of the tree
print(tree_model)
# Visualize the tree
rpart.plot(tree_model, box.palette = "blue", shadow.col = "gray", nn = TRUE)
# Visualize the tree
rpart.plot(tree_model, shadow.col = "gray", nn = TRUE)
# Visualize the tree
rpart.plot(tree_model, shadow.col = "gray")
tree_model <- rpart(G3 ~ ., data = sd)
# Visualize the tree
rpart.plot(tree_model, shadow.col = "gray")
# Get variable importance
var_importance <- tree_model$variable.importance
print(var_importance)
# Find the most important interactions
interactions <- data.frame(
var1 = character(),
var2 = character(),
importance = numeric()
)
for (var1 in names(var_importance)) {
for (var2 in names(var_importance)) {
if (var1 != var2) {
interaction_model <- rpart(grade_score ~ .^2, data = data[, c("grade_score", var1, var2)], method = "anova")
interaction_importance <- sum(interaction_model$variable.importance)
interactions <- rbind(interactions, data.frame(var1 = var1, var2 = var2, importance = interaction_importance))
}
}
}
for (var1 in names(var_importance)) {
for (var2 in names(var_importance)) {
if (var1 != var2) {
interaction_model <- rpart(G3 ~ .^2, data = sd[, c("G3", var1, var2)])
interaction_importance <- sum(interaction_model$variable.importance)
interactions <- rbind(interactions, data.frame(var1 = var1, var2 = var2, importance = interaction_importance))
}
}
}
for (var1 in names(var_importance)) {
for (var2 in names(var_importance)) {
if (var1 != var2) {
interaction_model <- rpart(G3 ~ .^2, data = sd[, c("G3", var1, var2)], method = "anova")
interaction_importance <- sum(interaction_model$variable.importance)
interactions <- rbind(interactions, data.frame(var1 = var1, var2 = var2, importance = interaction_importance))
}
}
}
library(dplyr)
find_important_interactions <- function(data, target_var, top_n = 10) {
# Get all predictor variables
predictors <- setdiff(names(data), target_var)
# Initialize empty dataframe for results
interactions <- data.frame(var1 = character(), var2 = character(), importance = numeric())
# Loop through all pairs of predictors
for (i in 1:(length(predictors) - 1)) {
for (j in (i + 1):length(predictors)) {
var1 <- predictors[i]
var2 <- predictors[j]
# Create formula for interaction
formula <- as.formula(paste(target_var, "~", var1, "*", var2))
# Fit regression tree model
model <- rpart(formula, data = data, method = "anova")
# Calculate importance of interaction
importance <- sum(model$variable.importance)
# Add to results dataframe
interactions <- rbind(interactions, data.frame(var1 = var1, var2 = var2, importance = importance))
}
}
# Sort interactions by importance and get top N
top_interactions <- interactions %>%
arrange(desc(importance)) %>%
head(top_n)
return(top_interactions)
}
result <- find_important_interactions(sd, "G3")
find_important_interactions <- function(data, target_var, top_n = 10) {
# Get all predictor variables
predictors <- setdiff(names(data), target_var)
# Initialize empty dataframe for results
interactions <- data.frame(var1 = character(), var2 = character(), importance = numeric())
# Loop through all pairs of predictors
for (i in 1:(length(predictors) - 1)) {
for (j in (i + 1):length(predictors)) {
var1 <- predictors[i]
var2 <- predictors[j]
# Create interaction term
data[paste0(var1, "_", var2)] <- data[[var1]] * data[[var2]]
# Create formula with original variables and interaction term
formula <- as.formula(paste(target_var, "~", var1, "+", var2, "+", paste0(var1, "_", var2)))
# Fit regression tree model
model <- rpart(formula, data = data, method = "anova")
# Calculate importance of interaction
importance <- model$variable.importance[paste0(var1, "_", var2)]
# If importance is NA (interaction wasn't used in the tree), set it to 0
if (is.na(importance)) importance <- 0
# Add to results dataframe
interactions <- rbind(interactions, data.frame(var1 = var1, var2 = var2, importance = importance))
# Remove the interaction term from the dataset
data[paste0(var1, "_", var2)] <- NULL
}
}
# Sort interactions by importance and get top N
top_interactions <- interactions %>%
arrange(desc(importance)) %>%
head(top_n)
return(top_interactions)
}
result <- find_important_interactions(sd, "G3")
find_important_interactions <- function(data, target_var, top_n = 10) {
# Get all predictor variables
predictors <- setdiff(names(data), target_var)
# Initialize empty dataframe for results
interactions <- data.frame(var1 = character(), var2 = character(), importance = numeric())
# Function to create interaction term
create_interaction <- function(x, y) {
if (is.numeric(x) && is.numeric(y)) {
return(x * y)
} else {
return(interaction(x, y, drop = TRUE))
}
}
# Loop through all pairs of predictors
for (i in 1:(length(predictors) - 1)) {
for (j in (i + 1):length(predictors)) {
var1 <- predictors[i]
var2 <- predictors[j]
# Create interaction term
int_name <- paste0(var1, "_", var2)
data[[int_name]] <- create_interaction(data[[var1]], data[[var2]])
# Create formula with original variables and interaction term
formula <- as.formula(paste(target_var, "~", var1, "+", var2, "+", int_name))
# Fit regression tree model
model <- rpart(formula, data = data, method = "anova")
# Calculate importance of interaction
importance <- model$variable.importance[int_name]
# If importance is NA (interaction wasn't used in the tree), set it to 0
if (is.na(importance)) importance <- 0
# Add to results dataframe
interactions <- rbind(interactions, data.frame(var1 = var1, var2 = var2, importance = importance))
# Remove the interaction term from the dataset
data[[int_name]] <- NULL
}
}
# Sort interactions by importance and get top N
top_interactions <- interactions %>%
arrange(desc(importance)) %>%
head(top_n)
return(top_interactions)
}
result <- find_important_interactions(sd, "G3")
print(result)
result <- find_important_interactions(sd, "G3")
print(result)
find_important_interactions <- function(data, target_var, top_n = 10) {
# Get all predictor variables
predictors <- setdiff(names(data), target_var)
# Initialize empty dataframe for results
interactions <- data.frame(var1 = character(), var2 = character(), importance = numeric())
# Function to create interaction term
create_interaction <- function(x, y) {
if (is.numeric(x) && is.numeric(y)) {
return(x * y)
} else {
return(interaction(x, y, drop = TRUE))
}
}
# Loop through all pairs of predictors
for (i in 1:(length(predictors) - 1)) {
for (j in (i + 1):length(predictors)) {
var1 <- predictors[i]
var2 <- predictors[j]
# Create interaction term
int_name <- paste0(var1, "_", var2)
data[[int_name]] <- create_interaction(data[[var1]], data[[var2]])
# Create formula with original variables and interaction term
formula <- as.formula(paste(target_var, "~", var1, "+", var2, "+", int_name))
# Fit regression tree model
model <- tryCatch({
rpart(formula, data = data, method = "anova")
}, error = function(e) {
message("Error in fitting model for ", var1, " and ", var2, ": ", e$message)
return(NULL)
})
# Calculate importance of interaction
importance <- 0
if (!is.null(model) && length(model$variable.importance) > 0) {
importance <- model$variable.importance[int_name]
if (is.na(importance)) importance <- 0
}
# Add to results dataframe
interactions <- rbind(interactions, data.frame(var1 = var1, var2 = var2, importance = importance))
# Remove the interaction term from the dataset
data[[int_name]] <- NULL
}
}
# Sort interactions by importance and get top N
top_interactions <- interactions %>%
arrange(desc(importance)) %>%
head(top_n)
return(top_interactions)
}
result <- find_important_interactions(sd, "G3")
print(result)
# 1. Enhanced tree diagram
rpart.plot(tree_model, extra = 101, fallen.leaves = TRUE, type = 4, main = "Decision Tree Visualization")
# Visualize the tree
rpart.plot(tree_model, shadow.col = "gray")
# Get variable importance
var_importance <- tree_model$variable.importance
print(var_importance)
# 1. Enhanced tree diagram
rpart.plot(tree_model, extra = 101, fallen.leaves = TRUE, type = 4, main = "Decision Tree Visualization")
# 2. Variable Importance Plot
var_importance <- data.frame(
variable = names(tree_model$variable.importance),
importance = tree_model$variable.importance
)
# 2. Variable Importance Plot
var_importance <- data.frame(
variable = names(tree_model$variable.importance),
importance = tree_model$variable.importance
)
ggplot(var_importance, aes(x = reorder(variable, importance), y = importance)) +
geom_bar(stat = "identity", fill = "skyblue") +
coord_flip() +
theme_minimal() +
labs(title = "Variable Importance", x = "Variables", y = "Importance")
library(ggplot2)
library(data.tree)
library(ggplot2)
library(data.tree)
install.packages('data.tree')
library(networkD3)
install.packages('networkD3')
View(var_importance)
# Visualize the tree
rpart.plot(tree_model, shadow.col = "gray")
rpart.plot(tree_model, extra = 101, fallen.leaves = TRUE, type = 4, main = "Decision Tree Visualization")
# Get variable importance
var_importance <- tree_model$variable.importance
print(var_importance)
# 2. Variable Importance Plot
var_importance <- data.frame(
variable = names(tree_model$variable.importance),
importance = tree_model$variable.importance
)
ggplot(var_importance, aes(x = reorder(variable, importance), y = importance)) +
geom_bar(stat = "identity", fill = "skyblue") +
coord_flip() +
theme_minimal() +
labs(title = "Variable Importance", x = "Variables", y = "Importance")
# 3. Interactive network diagram
# Convert rpart object to data.tree
to_data.tree <- function(model) {
nodes <- data.frame(node = as.numeric(rownames(model$frame)),
var = model$frame$var,
n = model$frame$n,
dev = model$frame$dev,
yval = model$frame$yval)
edges <- data.frame(model$splits)
edges$parent <- match(as.numeric(rownames(edges)), nodes$node)
edges$child <- match(edges$index, nodes$node)
tree <- Node$new("Root")
add_node <- function(parent, child_id) {
child <- nodes[nodes$node == child_id, ]
child_node <- parent$AddChild(child$var)
child_node$node <- child$node
child_node$n <- child$n
child_node$dev <- child$dev
child_node$yval <- child$yval
children <- edges[edges$parent == child_id, ]
if (nrow(children) > 0) {
add_node(child_node, children$child[1])
add_node(child_node, children$child[2])
}
}
add_node(tree, 1)
return(tree)
}
tree_data <- to_data.tree(tree_model)
tree_network <- ToDataFrameNetwork(tree_data, "name", "pathString")
# Create the interactive plot
networkD3::diagonalNetwork(tree_network, fontSize = 10, nodeStroke = "black")
tree_data <- to_data.tree(tree_model)
tree_network <- ToDataFrameNetwork(tree_data, "name", "pathString")
# Create the interactive plot
networkD3::diagonalNetwork(tree_network, fontSize = 10, nodeStroke = "black")
