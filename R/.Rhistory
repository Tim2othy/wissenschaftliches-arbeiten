)
)
adj = mse_data[1,2]
data_conc
len= length(cp_table[,"nsplit"])
data_conc = data.frame(
rep(cp_table[, "nsplit"],4),
c(cp_table[, "xerror"]*adj,
cp_table[, "rel error"]*adj,
mse_data$mse
),
c(rep("xe_er",len),
rep("re_er",len),
rep("tr_er",len),
rep("te_er",len)
)
)
ggplot(data_conc, aes(x = data_conc[,1], y = data_conc[,2], color = data_conc[,3])) +
geom_line() +
geom_point() +
scale_color_manual(values = c("blue", "red","green","black")) +
labs(
x = "Number of Splits", y = "Mean Squared Error",
title = "MSE vs Tree Complexity",
color = "MSE Type"
) +
theme_minimal() +
geom_vline(xintercept = opt_splits, linetype = "dashed", color = "purple") +
annotate("text",
x = opt_splits + 18, y = min_mse -1 , label = paste("Optimal number of splits =", opt_splits),
vjust = -1, color = "purple"
)
ggplot(data_conc, aes(x = data_conc[,1], y = data_conc[,2], color = data_conc[,3])) +
geom_line() +
geom_point() +
scale_color_manual(values = c("blue", "red","green","white")) +
labs(
x = "Number of Splits", y = "Mean Squared Error",
title = "MSE vs Tree Complexity",
color = "MSE Type"
) +
theme_minimal() +
geom_vline(xintercept = opt_splits, linetype = "dashed", color = "purple") +
annotate("text",
x = opt_splits + 18, y = min_mse -1 , label = paste("Optimal number of splits =", opt_splits),
vjust = -1, color = "purple"
)
ggplot(data_conc, aes(x = data_conc[,1], y = data_conc[,2], color = data_conc[,3])) +
geom_line() +
geom_point() +
scale_color_manual(values = c("blue", "red","white","black")) +
labs(
x = "Number of Splits", y = "Mean Squared Error",
title = "MSE vs Tree Complexity",
color = "MSE Type"
) +
theme_minimal() +
geom_vline(xintercept = opt_splits, linetype = "dashed", color = "purple") +
annotate("text",
x = opt_splits + 18, y = min_mse -1 , label = paste("Optimal number of splits =", opt_splits),
vjust = -1, color = "purple"
)
ggplot(data_conc, aes(x = data_conc[,1], y = data_conc[,2], color = data_conc[,3])) +
geom_line() +
geom_point() +
scale_color_manual(values = c("green", "red","yellow","black")) +
labs(
x = "Number of Splits", y = "Mean Squared Error",
title = "MSE vs Tree Complexity",
color = "MSE Type"
) +
theme_minimal() +
geom_vline(xintercept = opt_splits, linetype = "dashed", color = "purple") +
annotate("text",
x = opt_splits + 18, y = min_mse -1 , label = paste("Optimal number of splits =", opt_splits),
vjust = -1, color = "purple"
)
ggplot(data_conc, aes(x = data_conc[,1], y = data_conc[,2], color = data_conc[,3])) +
geom_line() +
geom_point() +
scale_color_manual(values = c("green", "red","blue","yellow")) +
labs(
x = "Number of Splits", y = "Mean Squared Error",
title = "MSE vs Tree Complexity",
color = "MSE Type"
) +
theme_minimal() +
geom_vline(xintercept = opt_splits, linetype = "dashed", color = "purple") +
annotate("text",
x = opt_splits + 18, y = min_mse -1 , label = paste("Optimal number of splits =", opt_splits),
vjust = -1, color = "purple"
)
ggplot(data_conc, aes(x = data_conc[,1]-0.03, y = data_conc[,2], color = data_conc[,3])) +
geom_line() +
geom_point() +
scale_color_manual(values = c("green", "red","blue","yellow")) +
labs(
x = "Number of Splits", y = "Mean Squared Error",
title = "MSE vs Tree Complexity",
color = "MSE Type"
) +
theme_minimal() +
geom_vline(xintercept = opt_splits, linetype = "dashed", color = "purple") +
annotate("text",
x = opt_splits + 18, y = min_mse -1 , label = paste("Optimal number of splits =", opt_splits),
vjust = -1, color = "purple"
)
ggplot(data_conc, aes(x = data_conc[,1]-0.3, y = data_conc[,2], color = data_conc[,3])) +
geom_line() +
geom_point() +
scale_color_manual(values = c("green", "red","blue","yellow")) +
labs(
x = "Number of Splits", y = "Mean Squared Error",
title = "MSE vs Tree Complexity",
color = "MSE Type"
) +
theme_minimal() +
geom_vline(xintercept = opt_splits, linetype = "dashed", color = "purple") +
annotate("text",
x = opt_splits + 18, y = min_mse -1 , label = paste("Optimal number of splits =", opt_splits),
vjust = -1, color = "purple"
)
ggplot(data_conc, aes(x = data_conc[,1]-1, y = data_conc[,2], color = data_conc[,3])) +
geom_line() +
geom_point() +
scale_color_manual(values = c("green", "red","blue","yellow")) +
labs(
x = "Number of Splits", y = "Mean Squared Error",
title = "MSE vs Tree Complexity",
color = "MSE Type"
) +
theme_minimal() +
geom_vline(xintercept = opt_splits, linetype = "dashed", color = "purple") +
annotate("text",
x = opt_splits + 18, y = min_mse -1 , label = paste("Optimal number of splits =", opt_splits),
vjust = -1, color = "purple"
)
data_conc = data.frame(
rep(cp_table[, "nsplit"],4),
c(cp_table[, "xerror"]*adj,
cp_table[, "rel error"]*adj-1,
mse_data$mse
),
c(rep("xe_er",len),
rep("re_er",len),
rep("tr_er",len),
rep("te_er",len)
)
)
ggplot(data_conc, aes(x = data_conc[,1], y = data_conc[,2], color = data_conc[,3])) +
geom_line() +
geom_point() +
scale_color_manual(values = c("green", "red","blue","yellow")) +
labs(
x = "Number of Splits", y = "Mean Squared Error",
title = "MSE vs Tree Complexity",
color = "MSE Type"
) +
theme_minimal() +
geom_vline(xintercept = opt_splits, linetype = "dashed", color = "purple") +
annotate("text",
x = opt_splits + 18, y = min_mse -1 , label = paste("Optimal number of splits =", opt_splits),
vjust = -1, color = "purple"
)
adj = mse_data[1,2]
len= length(cp_table[,"nsplit"])
data_conc = data.frame(
rep(cp_table[, "nsplit"],4),
c(cp_table[, "xerror"]*adj,
cp_table[, "rel error"]*adj-0.1,
mse_data$mse
),
c(rep("xe_er",len),
rep("re_er",len),
rep("tr_er",len),
rep("te_er",len)
)
)
ggplot(data_conc, aes(x = data_conc[,1], y = data_conc[,2], color = data_conc[,3])) +
geom_line() +
geom_point() +
scale_color_manual(values = c("green", "red","blue","yellow")) +
labs(
x = "Number of Splits", y = "Mean Squared Error",
title = "MSE vs Tree Complexity",
color = "MSE Type"
) +
theme_minimal() +
geom_vline(xintercept = opt_splits, linetype = "dashed", color = "purple") +
annotate("text",
x = opt_splits + 18, y = min_mse -1 , label = paste("Optimal number of splits =", opt_splits),
vjust = -1, color = "purple"
)
ggplot(mse_data, aes(x = num_splits, y = mse, color = type)) +
geom_line() +
geom_point() +
scale_color_manual(values = c("blue", "red")) +
labs(
x = "Number of Splits", y = "Mean Squared Error",
title = "MSE vs Tree Complexity",
color = "MSE Type"
) +
theme_minimal() +
geom_vline(xintercept = opt_splits, linetype = "dashed", color = "purple") +
annotate("text",
x = opt_splits + 18, y = min_mse -1 , label = paste("Optimal number of splits =", opt_splits),
vjust = -1, color = "purple"
)
# Calculate MSE for each CP value
mse_values <- sapply(cp_table[, "CP"], function(cp) {
pruned <- prune(complex_tree, cp = cp)
train_pred <- predict(pruned, train_data)
test_pred <- predict(pruned, valid_data)
train_mse <- calculate_mse(train_data$G3, train_pred)
test_mse <- calculate_mse(valid_data$G3, test_pred)
c(train_mse, test_mse)
})
View(mse_values)
cp_table <- complex_tree$cptable
num_splits <- cp_table[, "nsplit"]
plot(
cp_table[, "nsplit"],
cp_table[, "xerror"]
)
# Calculate MSE for each CP value
mse_values <- sapply(cp_table[, "CP"], function(cp) {
pruned <- prune(complex_tree, cp = cp)
train_pred <- predict(pruned, train_data)
test_pred <- predict(pruned, valid_data)
train_mse <- calculate_mse(train_data$G3, train_pred)
test_mse <- calculate_mse(valid_data$G3, test_pred)
c(train_mse, test_mse)
})
# Making data for ggplot
mse_data <- data.frame(
num_splits = rep(num_splits, 2),
mse = c(mse_values[1, ], mse_values[2, ]),
type = rep(c("Training MSE", "Test MSE"), each = length(num_splits))
)
View(mse_data)
adj = mse_data[1,2]
len= length(cp_table[,"nsplit"])
data_conc = data.frame(
rep(cp_table[, "nsplit"],4),
c(cp_table[, "xerror"]*adj,
cp_table[, "rel error"]*adj,
mse_data$mse
),
c(rep("xe_er",len),
rep("re_er",len),
rep("tr_er",len),
rep("te_er",len)
)
)
ggplot(data_conc, aes(x = data_conc[,1], y = data_conc[,2], color = data_conc[,3])) +
geom_line() +
geom_point() +
scale_color_manual(values = c("green", "red","blue","yellow")) +
labs(
x = "Number of Splits", y = "Mean Squared Error",
title = "MSE vs Tree Complexity",
color = "MSE Type"
) +
theme_minimal() +
geom_vline(xintercept = opt_splits, linetype = "dashed", color = "purple") +
annotate("text",
x = opt_splits + 18, y = min_mse -1 , label = paste("Optimal number of splits =", opt_splits),
vjust = -1, color = "purple"
)
# Function to calculate MSE
calculate_mse <- function(actual, predicted) {
mean((actual - predicted)^2)
}
load("C:/Users/timtj/GitHub/wissenschaftliches-arbeiten/R/student_por.RData")
sd <- data.frame(student_por)
sd <- sd %>%
mutate_if(is.character, as.factor)
sd$sumalc <- sd$Walc + sd$Dalc
sd$Dalc <- NULL
sd$Walc <- NULL
# Removing these because that would just be cheating
sd$G2 <- NULL
sd$G1 <- NULL
# also do basic test if data is working
plot(sd$studytime, sd$G3, col = "blue", pch = 19)
grid()
# Split the data into training (70%) and validation (30%) sets
split_index <- createDataPartition(sd$G3, p = 0.6, list = FALSE)
train_data <- sd[split_index, ]
valid_data <- sd[-split_index, ]
# Create a complex tree
complex_tree <- rpart(G3 ~ ., data = train_data, control = rpart.control(cp = 0.002, minsplit = 5))
rpart.plot(complex_tree, main = "Initial Complex Regression Tree")
plotcp(complex_tree$cptable[, "xerror"])
plotcp(complex_tree)
grid()
# Find optimal CP value
opt_cp   <- complex_tree$cptable[which.min(complex_tree$cptable[, "xerror"]), "CP"]
opt_sp_1 <- complex_tree$cptable[which.min(complex_tree$cptable[, "xerror"]), "nsplit"]
print(opt_sp_1) # for xerror using cross validation
print(opt_cp) # for xerror
print(min(complex_tree$cptable[, "xerror"]))
# Prune the tree
pruned_tree <- prune(complex_tree, cp = opt_cp)
print(min(complex_tree$cptable[, "rel error"]))
# Prune the tree
pruned_tree <- prune(complex_tree, cp = opt_cp)
rpart.plot(pruned_tree, main = "Optimal Pruned Tree")
# Calculate the MSEs
MSE_complex <- function() {
train_pred_complex <- predict(complex_tree, train_data)
test_pred_complex <- predict(complex_tree, valid_data)
train_mse_complex <- calculate_mse(train_data$G3, train_pred_complex)
test_mse_complex <- calculate_mse(valid_data$G3, test_pred_complex)
print(paste("Complex Tree - Training MSE:", train_mse_complex))
print(paste("Complex Tree -     Test MSE:", test_mse_complex))
}
MSE_pruned <- function() {
train_pred_pruned <- predict(pruned_tree, train_data)
test_pred_pruned <- predict(pruned_tree, valid_data)
train_mse_pruned <- calculate_mse(train_data$G3, train_pred_pruned)
test_mse_pruned <- calculate_mse(valid_data$G3, test_pred_pruned)
print(paste("Pruned Tree  - Training MSE:", train_mse_pruned))
print(paste("Pruned Tree  -     Test MSE:", test_mse_pruned))
}
MSE_complex()
MSE_pruned()
# Calculate the MSEs
MSE_complex <- function() {
train_pred_complex <- predict(complex_tree, train_data)
test_pred_complex <- predict(complex_tree, valid_data)
train_mse_complex <- calculate_mse(train_data$G3, train_pred_complex)
test_mse_complex <- calculate_mse(valid_data$G3, test_pred_complex)
print(paste("Complex Tree - Training MSE:", train_mse_complex))
print(paste("Complex Tree -     Test MSE:", test_mse_complex))
}
MSE_pruned <- function() {
train_pred_pruned <- predict(pruned_tree, train_data)
test_pred_pruned <- predict(pruned_tree, valid_data)
train_mse_pruned <- calculate_mse(train_data$G3, train_pred_pruned)
test_mse_pruned <- calculate_mse(valid_data$G3, test_pred_pruned)
print(paste("Pruned Tree  - Training MSE:", train_mse_pruned))
print(paste("Pruned Tree  -     Test MSE:", test_mse_pruned))
}
MSE_complex()
MSE_pruned()
# Find optimal CP value
opt_cp   <- complex_tree$cptable[which.min(complex_tree$cptable[, "xerror"]), "CP"]
opt_sp_1 <- complex_tree$cptable[which.min(complex_tree$cptable[, "xerror"]), "nsplit"]
print(opt_sp_1) # for xerror using cross validation
print(opt_cp) # for xerror
print(min(complex_tree$cptable[, "xerror"]))
print(min(complex_tree$cptable[, "rel error"]))
# Prune the tree
pruned_tree <- prune(complex_tree, cp = opt_cp)
rpart.plot(pruned_tree, main = "Optimal Pruned Tree")
0.8469317
0.1993765
View(complex_tree)
View(complex_tree)
complex_tree[["cptable"]]
View(pruned_tree)
cp_table <- complex_tree$cptable
View(cp_table)
?sapply
cp_table[, "CP"]
first_mse <- sapply(0.140409142, function(cp) {
pruned <- prune(complex_tree, cp = cp)
train_pred <- predict(pruned, train_data)
test_pred <- predict(pruned, valid_data)
train_mse <- calculate_mse(train_data$G3, train_pred)
test_mse <- calculate_mse(valid_data$G3, test_pred)
c(train_mse, test_mse)
})
first_mse
0.8469317 * 10.03636
0.1993765 * 10.03636
num_splits <- cp_table[, "nsplit"]
# Calculate MSE for each CP value
mse_values <- sapply(cp_table[, "CP"], function(cp) {
pruned <- prune(complex_tree, cp = cp)
train_pred <- predict(pruned, train_data)
test_pred <- predict(pruned, valid_data)
train_mse <- calculate_mse(train_data$G3, train_pred)
test_mse <- calculate_mse(valid_data$G3, test_pred)
c(train_mse, test_mse)
})
View(mse_values)
mse_values
adj = 10.03636
len= length(cp_table[,"nsplit"])
len
data_conc = data.frame(
rep(cp_table[, "nsplit"],4),
c(cp_table[, "xerror"]*adj,
cp_table[, "rel error"]*adj,
c(mse_values[1,],mse_values[2,])
),
c(rep("xe_er",len),
rep("re_er",len),
rep("tr_er",len),
rep("te_er",len)
)
)
ggplot(data_conc, aes(x = data_conc[,1], y = data_conc[,2], color = data_conc[,3])) +
geom_line() +
geom_point() +
scale_color_manual(values = c("green", "red","blue","yellow")) +
labs(
x = "Number of Splits", y = "Mean Squared Error",
title = "MSE vs Tree Complexity",
color = "MSE Type"
) +
theme_minimal() +
geom_vline(xintercept = opt_splits, linetype = "dashed", color = "purple") +
annotate("text",
x = opt_splits + 18, y = min_mse -1 , label = paste("Optimal number of splits =", opt_splits),
vjust = -1, color = "purple"
)
ggplot(data_conc, aes(x = data_conc[,1], y = data_conc[,2], color = data_conc[,3])) +
geom_line() +
geom_point() +
scale_color_manual(values = c("green", "red","blue","yellow")) +
labs(
x = "Number of Splits", y = "Mean Squared Error",
title = "MSE vs Tree Complexity",
color = "MSE Type"
) +
theme_minimal()
mse_values
adj = 12.03636
len = length(cp_table[,"nsplit"])
len
data_conc = data.frame(
rep(cp_table[, "nsplit"],4),
c(cp_table[, "xerror"]*adj,
cp_table[, "rel error"]*adj,
c(mse_values[1,],mse_values[2,])
),
c(rep("xe_er",len),
rep("re_er",len),
rep("tr_er",len),
rep("te_er",len)
)
)
ggplot(data_conc, aes(x = data_conc[,1], y = data_conc[,2], color = data_conc[,3])) +
geom_line() +
geom_point() +
scale_color_manual(values = c("green", "red","blue","yellow")) +
labs(
x = "Number of Splits", y = "Mean Squared Error",
title = "MSE vs Tree Complexity",
color = "MSE Type"
)
adj = 10.03636
len
data_conc = data.frame(
rep(cp_table[, "nsplit"],4),
c(cp_table[, "xerror"]*adj,
cp_table[, "rel error"]*adj,
c(mse_values[1,],mse_values[2,])
),
c(rep("xe_er",len),
rep("re_er",len),
rep("tr_er",len),
rep("te_er",len)
)
)
ggplot(data_conc, aes(x = data_conc[,1], y = data_conc[,2], color = data_conc[,3])) +
geom_line() +
geom_point() +
scale_color_manual(values = c("green", "red","blue","yellow")) +
labs(
x = "Number of Splits", y = "Mean Squared Error",
title = "MSE vs Tree Complexity",
color = "MSE Type"
)
theme_minimal()
ggplot(data_conc, aes(x = data_conc[,1], y = data_conc[,2], color = data_conc[,3])) +
geom_line() +
geom_point() +
scale_color_manual(values = c("green", "red","blue","yellow")) +
labs(
x = "Number of Splits", y = "Mean Squared Error",
title = "MSE vs Tree Complexity",
color = "MSE Type"
)
cp_tabe
cp_table
cp_table * 10.03636
test_table = cp_table * 10.03636
View(test_table)
# Calculate the MSEs
MSE_complex <- function() {
train_pred_complex <- predict(complex_tree, train_data)
test_pred_complex <- predict(complex_tree, valid_data)
train_mse_complex <- calculate_mse(train_data$G3, train_pred_complex)
test_mse_complex <- calculate_mse(valid_data$G3, test_pred_complex)
print(paste("Complex Tree - Training MSE:", train_mse_complex))
print(paste("Complex Tree -     Test MSE:", test_mse_complex))
}
MSE_pruned <- function() {
train_pred_pruned <- predict(pruned_tree, train_data)
test_pred_pruned <- predict(pruned_tree, valid_data)
train_mse_pruned <- calculate_mse(train_data$G3, train_pred_pruned)
test_mse_pruned <- calculate_mse(valid_data$G3, test_pred_pruned)
print(paste("Pruned Tree  - Training MSE:", train_mse_pruned))
print(paste("Pruned Tree  -     Test MSE:", test_mse_pruned))
}
MSE_complex()
MSE_pruned()
View(data_conc)
